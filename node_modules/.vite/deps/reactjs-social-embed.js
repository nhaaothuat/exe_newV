import {
  require_prop_types
} from "./chunk-VIYFV7DI.js";
import {
  __toESM,
  require_react
} from "./chunk-BW7D66CD.js";

// node_modules/reactjs-social-embed/dist/index.es.js
var import_react = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var Youtube = function Youtube2(_ref) {
  var id = _ref.id, poster = _ref.poster, autoPlay = _ref.autoPlay, width = _ref.width, height = _ref.height, parentClass = _ref.parentClass, iframeClass = _ref.iframeClass, isPlaylist = _ref.isPlaylist;
  var videoId = encodeURIComponent(id);
  var iframeSrc = !isPlaylist ? "https://www.youtube.com/embed/" + videoId + "?autoplay=" + (autoPlay ? "1" : "0") : "https://www.youtube.com/embed/videoseries?list=" + videoId;
  return import_react.default.createElement(
    import_react.Fragment,
    null,
    import_react.default.createElement(
      "div",
      {
        className: "" + parentClass
      },
      import_react.default.createElement("iframe", {
        className: iframeClass,
        width,
        height,
        frameBorder: "0",
        allow: "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",
        allowFullScreen: true,
        src: iframeSrc
      })
    )
  );
};
Youtube.propTypes = {
  id: import_prop_types.default.string,
  poster: import_prop_types.default.string,
  width: import_prop_types.default.string,
  height: import_prop_types.default.string,
  isPlaylist: import_prop_types.default.bool,
  autoPlay: import_prop_types.default.bool,
  parentClass: import_prop_types.default.string,
  embedClass: import_prop_types.default.string,
  iframeClass: import_prop_types.default.string
};
Youtube.defaultProps = {
  id: "",
  autoPlay: false,
  poster: "hqdefault",
  width: "560",
  height: "315",
  isPlaylist: false,
  parentClass: "",
  iframeClass: ""
};
var callbacks = [];
var addScript = function addScript2(src, cb) {
  if (callbacks.length === 0) {
    callbacks.push(cb);
    var s = document.createElement("script");
    s.setAttribute("src", src);
    s.onload = function() {
      return callbacks.forEach(function(cb2) {
        return cb2();
      });
    };
    document.body.appendChild(s);
  } else {
    callbacks.push(cb);
  }
};
var Twitter = function Twitter2(_ref) {
  var id = _ref.id, parentClass = _ref.parentClass;
  var videoId = encodeURIComponent(id);
  var tweetRef = (0, import_react.useRef)();
  var renderTweet = function renderTweet2() {
    var current = tweetRef.current;
    window.twttr.widgets.createTweetEmbed(videoId, current);
  };
  (0, import_react.useEffect)(function() {
    if (!window.twttr) {
      addScript("https://platform.twitter.com/widgets.js", renderTweet);
    } else {
      renderTweet();
    }
  });
  return import_react.default.createElement(
    import_react.Fragment,
    null,
    import_react.default.createElement("div", { className: "" + parentClass, ref: tweetRef })
  );
};
Twitter.propTypes = {
  id: import_prop_types.default.string,
  parentClass: import_prop_types.default.string
};
Twitter.defaultProps = {
  id: "",
  parentClass: ""
};
var strictUriEncode = function(str) {
  return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
    return "%" + c.charCodeAt(0).toString(16).toUpperCase();
  });
};
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
  if (val === null || val === void 0) {
    throw new TypeError("Object.assign cannot be called with null or undefined");
  }
  return Object(val);
}
function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    }
    var test1 = new String("abc");
    test1[5] = "de";
    if (Object.getOwnPropertyNames(test1)[0] === "5") {
      return false;
    }
    var test2 = {};
    for (var i = 0; i < 10; i++) {
      test2["_" + String.fromCharCode(i)] = i;
    }
    var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
      return test2[n];
    });
    if (order2.join("") !== "0123456789") {
      return false;
    }
    var test3 = {};
    "abcdefghijklmnopqrst".split("").forEach(function(letter) {
      test3[letter] = letter;
    });
    if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
      return false;
    }
    return true;
  } catch (err) {
    return false;
  }
}
var objectAssign = shouldUseNative() ? Object.assign : function(target, source) {
  var from;
  var to = toObject(target);
  var symbols;
  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);
    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);
      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }
  return to;
};
function encoderForArrayFormat(opts) {
  switch (opts.arrayFormat) {
    case "index":
      return function(key, value, index) {
        return value === null ? [
          encode(key, opts),
          "[",
          index,
          "]"
        ].join("") : [
          encode(key, opts),
          "[",
          encode(index, opts),
          "]=",
          encode(value, opts)
        ].join("");
      };
    case "bracket":
      return function(key, value) {
        return value === null ? encode(key, opts) : [
          encode(key, opts),
          "[]=",
          encode(value, opts)
        ].join("");
      };
    default:
      return function(key, value) {
        return value === null ? encode(key, opts) : [
          encode(key, opts),
          "=",
          encode(value, opts)
        ].join("");
      };
  }
}
function parserForArrayFormat(opts) {
  var result;
  switch (opts.arrayFormat) {
    case "index":
      return function(key, value, accumulator) {
        result = /\[(\d*)\]$/.exec(key);
        key = key.replace(/\[\d*\]$/, "");
        if (!result) {
          accumulator[key] = value;
          return;
        }
        if (accumulator[key] === void 0) {
          accumulator[key] = {};
        }
        accumulator[key][result[1]] = value;
      };
    case "bracket":
      return function(key, value, accumulator) {
        result = /(\[\])$/.exec(key);
        key = key.replace(/\[\]$/, "");
        if (!result) {
          accumulator[key] = value;
          return;
        } else if (accumulator[key] === void 0) {
          accumulator[key] = [value];
          return;
        }
        accumulator[key] = [].concat(accumulator[key], value);
      };
    default:
      return function(key, value, accumulator) {
        if (accumulator[key] === void 0) {
          accumulator[key] = value;
          return;
        }
        accumulator[key] = [].concat(accumulator[key], value);
      };
  }
}
function encode(value, opts) {
  if (opts.encode) {
    return opts.strict ? strictUriEncode(value) : encodeURIComponent(value);
  }
  return value;
}
function keysSorter(input) {
  if (Array.isArray(input)) {
    return input.sort();
  } else if (typeof input === "object") {
    return keysSorter(Object.keys(input)).sort(function(a, b) {
      return Number(a) - Number(b);
    }).map(function(key) {
      return input[key];
    });
  }
  return input;
}
var extract = function(str) {
  return str.split("?")[1] || "";
};
var parse = function(str, opts) {
  opts = objectAssign({ arrayFormat: "none" }, opts);
  var formatter = parserForArrayFormat(opts);
  var ret = /* @__PURE__ */ Object.create(null);
  if (typeof str !== "string") {
    return ret;
  }
  str = str.trim().replace(/^(\?|#|&)/, "");
  if (!str) {
    return ret;
  }
  str.split("&").forEach(function(param) {
    var parts = param.replace(/\+/g, " ").split("=");
    var key = parts.shift();
    var val = parts.length > 0 ? parts.join("=") : void 0;
    val = val === void 0 ? null : decodeURIComponent(val);
    formatter(decodeURIComponent(key), val, ret);
  });
  return Object.keys(ret).sort().reduce(function(result, key) {
    var val = ret[key];
    if (Boolean(val) && typeof val === "object" && !Array.isArray(val)) {
      result[key] = keysSorter(val);
    } else {
      result[key] = val;
    }
    return result;
  }, /* @__PURE__ */ Object.create(null));
};
var stringify = function(obj, opts) {
  var defaults = {
    encode: true,
    strict: true,
    arrayFormat: "none"
  };
  opts = objectAssign(defaults, opts);
  var formatter = encoderForArrayFormat(opts);
  return obj ? Object.keys(obj).sort().map(function(key) {
    var val = obj[key];
    if (val === void 0) {
      return "";
    }
    if (val === null) {
      return encode(key, opts);
    }
    if (Array.isArray(val)) {
      var result = [];
      val.slice().forEach(function(val2) {
        if (val2 === void 0) {
          return;
        }
        result.push(formatter(key, val2, result.length));
      });
      return result.join("&");
    }
    return encode(key, opts) + "=" + encode(val, opts);
  }).filter(function(x) {
    return x.length > 0;
  }).join("&") : "";
};
var queryString = {
  extract,
  parse,
  stringify
};
var slicedToArray = /* @__PURE__ */ function() {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = void 0;
    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"])
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  return function(arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();
var callbacks$1 = [];
var Instagram = function Instagram2(_ref) {
  var id = _ref.id, url = _ref.url, hideCaption = _ref.hideCaption, width = _ref.width, parentClass = _ref.parentClass;
  var _useState = (0, import_react.useState)(""), _useState2 = slicedToArray(_useState, 2), instaEmbed = _useState2[0], setinstaEmbed = _useState2[1];
  var getQueryParams = function getQueryParams2(_ref2) {
    var url2 = _ref2.url, hideCaption2 = _ref2.hideCaption, maxWidth = _ref2.maxWidth;
    return queryString.stringify({
      url: url2,
      hidecaption: hideCaption2,
      maxwidth: maxWidth >= 320 ? maxWidth : void 0,
      omitscript: true
    });
  };
  var addScript3 = function addScript4(src, id2, cb) {
    if (callbacks$1.length === 0) {
      callbacks$1.push(cb);
      var s = document.createElement("script");
      s.setAttribute("src", src);
      s.setAttribute("id", id2);
      s.async = s.defer = true;
      s.onload = function() {
        return callbacks$1.forEach(function(cb2) {
          return cb2();
        });
      };
      document.body.appendChild(s);
    } else {
      callbacks$1.push(cb);
    }
  };
  var fetchEmbed = function fetchEmbed2(params) {
    fetch("https://api.instagram.com/oembed/?" + params).then(function(res) {
      return res.json();
    }).then(function(result) {
      setinstaEmbed(result.html);
    }, function(error) {
      console.throw(erorr);
    });
  };
  var renderInsta = function renderInsta2() {
    fetchEmbed(getQueryParams({ url, hideCaption, width }));
  };
  (0, import_react.useEffect)(function() {
    if (instaEmbed) {
      window.instgrm.Embeds.process();
    }
    if (window.instgrm || document.getElementById("react-instagram-embed-script")) {
      fetchEmbed(getQueryParams({ url, hideCaption, width }));
    } else {
      addScript3("https://platform.instagram.com/en_US/embeds.js", "react-instagram-embed-script", renderInsta);
    }
  });
  return import_react.default.createElement(
    import_react.Fragment,
    null,
    import_react.default.createElement("div", { className: "" + parentClass, dangerouslySetInnerHTML: { __html: instaEmbed } })
  );
};
Instagram.propTypes = {
  url: import_prop_types.default.string,
  hideCaption: import_prop_types.default.bool,
  width: import_prop_types.default.string,
  parentClass: import_prop_types.default.string
};
Instagram.defaultProps = {
  url: "",
  hideCaption: false,
  width: "500px",
  parentClass: ""
};
var Facebook = function Facebook2(_ref) {
  var type = _ref.type, url = _ref.url, width = _ref.width, height = _ref.height, show_text = _ref.show_text, parentClass = _ref.parentClass, iframeClass = _ref.iframeClass;
  var iframeBase = type === "post" ? "https://www.facebook.com/plugins/post.php?href=" : "https://www.facebook.com/plugins/video.php?href=";
  var iframeSrc = "" + iframeBase + url + "'&width=500" + (show_text ? "&show_text=1" : "");
  console.log("ififrameSrc", iframeSrc);
  return import_react.default.createElement(
    import_react.Fragment,
    null,
    import_react.default.createElement(
      "div",
      {
        className: "" + parentClass
      },
      import_react.default.createElement("iframe", {
        className: iframeClass,
        width,
        height,
        frameBorder: "0",
        allowTransparency: "true",
        allow: "encrypted-media",
        allowFullScreen: true,
        scrolling: "no",
        src: iframeSrc
      })
    )
  );
};
Facebook.propTypes = {
  type: import_prop_types.default.string,
  url: import_prop_types.default.string,
  show_text: import_prop_types.default.bool,
  width: import_prop_types.default.string,
  height: import_prop_types.default.string,
  parentClass: import_prop_types.default.string,
  iframeClass: import_prop_types.default.string
};
Facebook.defaultProps = {
  type: "post",
  show_text: true,
  url: "",
  width: "640",
  height: "640",
  parentClass: "",
  iframeClass: ""
};
var Vimeo = function Vimeo2(_ref) {
  var id = _ref.id, width = _ref.width, height = _ref.height, autoPlay = _ref.autoPlay, parentClass = _ref.parentClass, iframeClass = _ref.iframeClass;
  var vimeoId = encodeURIComponent(id);
  var iframeSrc = "https://player.vimeo.com/video/" + vimeoId + "?autoplay=" + (autoPlay ? "1" : "0");
  return import_react.default.createElement(
    import_react.Fragment,
    null,
    import_react.default.createElement(
      "div",
      {
        className: "" + parentClass
      },
      import_react.default.createElement("iframe", {
        className: iframeClass,
        width,
        height,
        frameBorder: "0",
        allow: "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",
        allowFullScreen: true,
        src: iframeSrc
      })
    )
  );
};
Vimeo.propTypes = {
  id: import_prop_types.default.string,
  width: import_prop_types.default.string,
  height: import_prop_types.default.string,
  autoPlay: import_prop_types.default.bool,
  parentClass: import_prop_types.default.string,
  iframeClass: import_prop_types.default.string
};
Vimeo.defaultProps = {
  id: "",
  autoPlay: false,
  width: "640",
  height: "360",
  parentClass: "",
  iframeClass: ""
};
export {
  Facebook,
  Instagram,
  Twitter,
  Vimeo,
  Youtube
};
/*! Bundled license information:

reactjs-social-embed/dist/index.es.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
*/
//# sourceMappingURL=reactjs-social-embed.js.map
